package org.apache.pdfbox.io;
import com.thoughtworks.xstream.XStream;
import java.io.File;
import java.lang.reflect.Field;
import java.util.Scanner;

import converters.FileCleanableConverter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InOrder;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
@ExtendWith(MockitoExtension.class)
public class TestRandomAccessInputStreamPanktiGen {
    static XStream xStream = new XStream();

    private <T> T deserializeObject(String serializedObjectString) {
        return (T) xStream.fromXML(serializedObjectString);
    }

    private <T> T deserializeObject(File serializedObjectFile) throws Exception {
        Scanner scanner = new Scanner(serializedObjectFile);
        String serializedObjectString = scanner.useDelimiter("\\A").next();
        return (T) xStream.fromXML(serializedObjectString);
    }

    @BeforeAll
    public static void setxStream() {
        xStream.registerConverter(new FileCleanableConverter());
    }

    private RandomAccessRead insertPrivateMockField_input_InRandomAccessInputStream(RandomAccessInputStream receivingObject) throws Exception {
        RandomAccessRead mockRandomAccessRead = Mockito.mock(RandomAccessRead.class);
        Field fieldToMock = receivingObject.getClass().getDeclaredField("input");
        fieldToMock.setAccessible(true);
        fieldToMock.set(receivingObject, mockRandomAccessRead);
        return mockRandomAccessRead;
    }

    @Test
    public void test_read_OO_737636454b3144b2b324d6ebc3e20553() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>4096</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        // Assert
        Assertions.assertEquals(2725, receivingObject.read(paramObject1, paramObject2, paramObject3));
    }

    @Test
    public void test_read_PO_737636454b3144b2b324d6ebc3e20553() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>4096</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
    }

    @Test
    public void test_read_CO_737636454b3144b2b324d6ebc3e20553() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>4096</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
    }

    @Test
    public void test_read_OO_3261554c599d4f95827a836aa71cd9d7() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>2129</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        // Assert
        Assertions.assertEquals(2129, receivingObject.read(paramObject1, paramObject2, paramObject3));
    }

    @Test
    public void test_read_PO_3261554c599d4f95827a836aa71cd9d7() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>2129</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
    }

    @Test
    public void test_read_CO_3261554c599d4f95827a836aa71cd9d7() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>2129</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
    }

    @Test
    public void test_read_OO_3d55de998ceb4b488fbd7701020b5766() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>2048</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        // Assert
        Assertions.assertEquals(2048, receivingObject.read(paramObject1, paramObject2, paramObject3));
    }

    @Test
    public void test_read_PO_3d55de998ceb4b488fbd7701020b5766() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>2048</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
    }

    @Test
    public void test_read_CO_3d55de998ceb4b488fbd7701020b5766() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>2048</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
    }

    @Test
    public void test_read_OO_e0bd9d82a7144d87a1cbb3f6338da099() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int4-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-array>AAAAAAAAAAAAAA==</byte-array>" +
        "  <int>0</int>" +
        "  <int>10</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        // Assert
        Assertions.assertEquals(10, receivingObject.read(paramObject1, paramObject2, paramObject3));
    }

    @Test
    public void test_read_PO_e0bd9d82a7144d87a1cbb3f6338da099() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int4-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-array>AAAAAAAAAAAAAA==</byte-array>" +
        "  <int>0</int>" +
        "  <int>10</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
    }

    @Test
    public void test_read_CO_e0bd9d82a7144d87a1cbb3f6338da099() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int4-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-array>AAAAAAAAAAAAAA==</byte-array>" +
        "  <int>0</int>" +
        "  <int>10</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
    }

    @Test
    public void test_read_OO_47d3191041f243eaa2030fcf32d71684() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int5-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>4096</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        // Assert
        Assertions.assertEquals(3349, receivingObject.read(paramObject1, paramObject2, paramObject3));
    }

    @Test
    public void test_read_PO_47d3191041f243eaa2030fcf32d71684() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int5-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>4096</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
    }

    @Test
    public void test_read_CO_47d3191041f243eaa2030fcf32d71684() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read_byte_arr_,int,int5-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        String paramsObjectStr = 
        "<object-array>" +
        "  <byte-arraybyte-array>" +
        "  <int>0</int>" +
        "  <int>4096</int>" +
        "</object-array>";
        Object[] paramObjects = deserializeObject(paramsObjectStr);
        byte[] paramObject1 = (byte[]) paramObjects[0];
        int paramObject2 = (Integer) paramObjects[1];
        int paramObject3 = (Integer) paramObjects[2];
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        // Act
        receivingObject.read(paramObject1, paramObject2, paramObject3);
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
    }

    @Test
    public void test_read_OO_564c4578e7644de48fc52125bc5996f4() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        // Assert
        Assertions.assertEquals(72, receivingObject.read());
    }

    @Test
    public void test_read_PO_564c4578e7644de48fc52125bc5996f4() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        receivingObject.read();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).read();
    }

    @Test
    public void test_read_CO_564c4578e7644de48fc52125bc5996f4() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        receivingObject.read();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
        orderVerifier.verify(mockRandomAccessRead).read();
    }

    @Test
    public void test_read_OO_a7b934a515c94553be2026cc0516877d() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        // Assert
        Assertions.assertEquals(72, receivingObject.read());
    }

    @Test
    public void test_read_PO_a7b934a515c94553be2026cc0516877d() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        receivingObject.read();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).read();
    }

    @Test
    public void test_read_CO_a7b934a515c94553be2026cc0516877d() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        receivingObject.read();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
        orderVerifier.verify(mockRandomAccessRead).read();
    }

    @Test
    public void test_read_OO_701c116367b1440fbf0bff55d60c0f39() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        // Assert
        Assertions.assertEquals(72, receivingObject.read());
    }

    @Test
    public void test_read_PO_701c116367b1440fbf0bff55d60c0f39() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        receivingObject.read();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).isEOF();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).read();
    }

    @Test
    public void test_read_CO_701c116367b1440fbf0bff55d60c0f39() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.read3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.isEOF()).thenReturn(false);
        Mockito.when(mockRandomAccessRead.read()).thenReturn(72);
        // Act
        receivingObject.read();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).isEOF();
        orderVerifier.verify(mockRandomAccessRead).read();
    }

    @Test
    public void test_available_OO_2ff1c7ffd8304052a93e97d907549cf9() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(3598L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        // Assert
        Assertions.assertEquals(1548, receivingObject.available());
    }

    @Test
    public void test_available_PO_2ff1c7ffd8304052a93e97d907549cf9() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(3598L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        receivingObject.available();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).length();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).getPosition();
    }

    @Test
    public void test_available_CO_2ff1c7ffd8304052a93e97d907549cf9() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available1-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(3598L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        receivingObject.available();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).length();
        orderVerifier.verify(mockRandomAccessRead).getPosition();
    }

    @Test
    public void test_available_OO_117f18366aa345519f07c881cb2e04f9() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(2772L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        // Assert
        Assertions.assertEquals(722, receivingObject.available());
    }

    @Test
    public void test_available_PO_117f18366aa345519f07c881cb2e04f9() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(2772L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        receivingObject.available();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).length();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).getPosition();
    }

    @Test
    public void test_available_CO_117f18366aa345519f07c881cb2e04f9() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available2-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(2772L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        receivingObject.available();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).length();
        orderVerifier.verify(mockRandomAccessRead).getPosition();
    }

    @Test
    public void test_available_OO_7f9572153ce9410aa8df6afea6c6a8f1() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(2129L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(0L);
        // Act
        // Assert
        Assertions.assertEquals(2129, receivingObject.available());
    }

    @Test
    public void test_available_PO_7f9572153ce9410aa8df6afea6c6a8f1() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(2129L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(0L);
        // Act
        receivingObject.available();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).length();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).getPosition();
    }

    @Test
    public void test_available_CO_7f9572153ce9410aa8df6afea6c6a8f1() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available3-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(2129L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(0L);
        // Act
        receivingObject.available();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).length();
        orderVerifier.verify(mockRandomAccessRead).getPosition();
    }

    @Test
    public void test_available_OO_8c2c3a55ac6b48fe8501581983a9a3fb() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available4-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(21934L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        // Assert
        Assertions.assertEquals(19884, receivingObject.available());
    }

    @Test
    public void test_available_PO_8c2c3a55ac6b48fe8501581983a9a3fb() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available4-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(21934L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        receivingObject.available();
        // Assert
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).length();
        Mockito.verify(mockRandomAccessRead, Mockito.atLeastOnce()).getPosition();
    }

    @Test
    public void test_available_CO_8c2c3a55ac6b48fe8501581983a9a3fb() throws Exception {
        // Arrange
        ClassLoader classLoader = getClass().getClassLoader();
        File fileReceiving = new File(classLoader.getResource("org.apache.pdfbox.io.RandomAccessInputStream.available4-receiving.xml").getFile());
        org.apache.pdfbox.io.RandomAccessInputStream receivingObject = deserializeObject(fileReceiving);
        RandomAccessRead mockRandomAccessRead = insertPrivateMockField_input_InRandomAccessInputStream(receivingObject);
        Mockito.when(mockRandomAccessRead.length()).thenReturn(21934L);
        Mockito.when(mockRandomAccessRead.getPosition()).thenReturn(2050L);
        // Act
        receivingObject.available();
        // Assert
        InOrder orderVerifier = Mockito.inOrder(mockRandomAccessRead, mockRandomAccessRead);
        orderVerifier.verify(mockRandomAccessRead).length();
        orderVerifier.verify(mockRandomAccessRead).getPosition();
    }
}