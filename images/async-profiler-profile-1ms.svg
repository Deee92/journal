<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (11,476 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[no_Java_frame] (7 samples, 0.06%)</title><rect x="10.0" y="755.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java.lang.String (6 samples, 0.05%)</title><rect x="10.1" y="739.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.1" y="750.0"></text>
</g>
<g>
<title>com.turn.ttorrent.cli.ClientMain.main (2,634 samples, 22.95%)</title><rect x="10.9" y="755.0" width="270.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.9" y="766.0">com.turn.ttorrent.cli.ClientMain.main</text>
</g>
<g>
<title>com.turn.ttorrent.client.SimpleClient.downloadTorrent (2,633 samples, 22.94%)</title><rect x="10.9" y="739.0" width="270.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.9" y="750.0">com.turn.ttorrent.client.SimpleClien..</text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.addTorrent (2,632 samples, 22.93%)</title><rect x="10.9" y="723.0" width="270.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.9" y="734.0">com.turn.ttorrent.client.Communicati..</text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.addTorrent (2,632 samples, 22.93%)</title><rect x="10.9" y="707.0" width="270.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.9" y="718.0">com.turn.ttorrent.client.Communicati..</text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.addTorrent (15 samples, 0.13%)</title><rect x="10.9" y="691.0" width="1.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.9" y="702.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.forceAnnounceAndLogError (15 samples, 0.13%)</title><rect x="10.9" y="675.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.9" y="686.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.Announce.forceAnnounce (15 samples, 0.13%)</title><rect x="10.9" y="659.0" width="1.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.9" y="670.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.TrackerClient.announceAllInterfaces (15 samples, 0.13%)</title><rect x="10.9" y="643.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.9" y="654.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.HTTPTrackerClient.announce (15 samples, 0.13%)</title><rect x="10.9" y="627.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.9" y="638.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.HTTPTrackerClient.sendAnnounce (15 samples, 0.13%)</title><rect x="10.9" y="611.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.9" y="622.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.HTTPTrackerClient.sendAnnounce (15 samples, 0.13%)</title><rect x="10.9" y="595.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.9" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.HTTPTrackerClient.openConnectionCheckRedirects (15 samples, 0.13%)</title><rect x="10.9" y="579.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.9" y="590.0"></text>
</g>
<g>
<title>java.net.URL.openConnection (10 samples, 0.09%)</title><rect x="10.9" y="563.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.9" y="574.0"></text>
</g>
<g>
<title>sun.net.www.protocol.https.Handler.openConnection (10 samples, 0.09%)</title><rect x="10.9" y="547.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.9" y="558.0"></text>
</g>
<g>
<title>sun.net.www.protocol.https.Handler.openConnection (10 samples, 0.09%)</title><rect x="10.9" y="531.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.9" y="542.0"></text>
</g>
<g>
<title>sun.net.www.protocol.https.HttpsURLConnectionImpl.&lt;init&gt; (10 samples, 0.09%)</title><rect x="10.9" y="515.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.9" y="526.0"></text>
</g>
<g>
<title>javax.net.ssl.HttpsURLConnection.&lt;init&gt; (9 samples, 0.08%)</title><rect x="10.9" y="499.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.9" y="510.0"></text>
</g>
<g>
<title>javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory (9 samples, 0.08%)</title><rect x="10.9" y="483.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.9" y="494.0"></text>
</g>
<g>
<title>javax.net.ssl.SSLSocketFactory.getDefault (9 samples, 0.08%)</title><rect x="10.9" y="467.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.9" y="478.0"></text>
</g>
<g>
<title>javax.net.ssl.SSLContext.getDefault (9 samples, 0.08%)</title><rect x="10.9" y="451.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.9" y="462.0"></text>
</g>
<g>
<title>javax.net.ssl.SSLContext.getInstance (9 samples, 0.08%)</title><rect x="10.9" y="435.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.9" y="446.0"></text>
</g>
<g>
<title>sun.security.jca.GetInstance.getInstance (9 samples, 0.08%)</title><rect x="10.9" y="419.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.9" y="430.0"></text>
</g>
<g>
<title>sun.security.jca.GetInstance.getInstance (8 samples, 0.07%)</title><rect x="10.9" y="403.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.9" y="414.0"></text>
</g>
<g>
<title>java.security.Provider$Service.newInstance (8 samples, 0.07%)</title><rect x="10.9" y="387.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.9" y="398.0"></text>
</g>
<g>
<title>java.security.Provider.newInstanceUtil (6 samples, 0.05%)</title><rect x="11.1" y="371.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="14.1" y="382.0"></text>
</g>
<g>
<title>java.lang.reflect.Constructor.newInstance (6 samples, 0.05%)</title><rect x="11.1" y="355.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="14.1" y="366.0"></text>
</g>
<g>
<title>jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.05%)</title><rect x="11.1" y="339.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.1" y="350.0"></text>
</g>
<g>
<title>jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance (6 samples, 0.05%)</title><rect x="11.1" y="323.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.1" y="334.0"></text>
</g>
<g>
<title>jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0 (6 samples, 0.05%)</title><rect x="11.1" y="307.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="14.1" y="318.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLContextImpl$DefaultSSLContext.&lt;init&gt; (6 samples, 0.05%)</title><rect x="11.1" y="291.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="14.1" y="302.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLContextImpl$DefaultManagersHolder.&lt;clinit&gt; (6 samples, 0.05%)</title><rect x="11.1" y="275.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.1" y="286.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLContextImpl$DefaultManagersHolder.getTrustManagers (6 samples, 0.05%)</title><rect x="11.1" y="259.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="14.1" y="270.0"></text>
</g>
<g>
<title>javax.net.ssl.TrustManagerFactory.init (6 samples, 0.05%)</title><rect x="11.1" y="243.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.1" y="254.0"></text>
</g>
<g>
<title>sun.security.ssl.TrustManagerFactoryImpl.engineInit (6 samples, 0.05%)</title><rect x="11.1" y="227.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.1" y="238.0"></text>
</g>
<g>
<title>sun.security.ssl.TrustStoreManager.getTrustedCerts (6 samples, 0.05%)</title><rect x="11.1" y="211.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="14.1" y="222.0"></text>
</g>
<g>
<title>sun.security.ssl.TrustStoreManager$TrustAnchorManager.getTrustedCerts (6 samples, 0.05%)</title><rect x="11.1" y="195.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.1" y="206.0"></text>
</g>
<g>
<title>sun.security.ssl.TrustStoreManager$TrustAnchorManager.loadKeyStore (6 samples, 0.05%)</title><rect x="11.1" y="179.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.1" y="190.0"></text>
</g>
<g>
<title>java.security.KeyStore.load (6 samples, 0.05%)</title><rect x="11.1" y="163.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.1" y="174.0"></text>
</g>
<g>
<title>sun.security.util.KeyStoreDelegator.engineLoad (6 samples, 0.05%)</title><rect x="11.1" y="147.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.1" y="158.0"></text>
</g>
<g>
<title>sun.security.provider.JavaKeyStore.engineLoad (6 samples, 0.05%)</title><rect x="11.1" y="131.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="14.1" y="142.0"></text>
</g>
<g>
<title>java.security.cert.CertificateFactory.generateCertificate (5 samples, 0.04%)</title><rect x="11.1" y="115.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="14.1" y="126.0"></text>
</g>
<g>
<title>sun.security.provider.X509Factory.engineGenerateCertificate (5 samples, 0.04%)</title><rect x="11.1" y="99.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.1" y="110.0"></text>
</g>
<g>
<title>sun.security.x509.X509CertImpl.&lt;init&gt; (3 samples, 0.03%)</title><rect x="11.3" y="83.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="14.3" y="94.0"></text>
</g>
<g>
<title>sun.security.x509.X509CertImpl.parse (3 samples, 0.03%)</title><rect x="11.3" y="67.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.3" y="78.0"></text>
</g>
<g>
<title>sun.security.x509.X509CertInfo.&lt;init&gt; (3 samples, 0.03%)</title><rect x="11.3" y="51.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.3" y="62.0"></text>
</g>
<g>
<title>sun.security.x509.X509CertInfo.parse (3 samples, 0.03%)</title><rect x="11.3" y="35.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="14.3" y="46.0"></text>
</g>
<g>
<title>sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode (5 samples, 0.04%)</title><rect x="12.0" y="563.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="15.0" y="574.0"></text>
</g>
<g>
<title>java.net.HttpURLConnection.getResponseCode (5 samples, 0.04%)</title><rect x="12.0" y="547.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="15.0" y="558.0"></text>
</g>
<g>
<title>sun.net.www.protocol.http.HttpURLConnection.getInputStream (5 samples, 0.04%)</title><rect x="12.0" y="531.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="15.0" y="542.0"></text>
</g>
<g>
<title>sun.net.www.protocol.http.HttpURLConnection.getInputStream0 (5 samples, 0.04%)</title><rect x="12.0" y="515.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="15.0" y="526.0"></text>
</g>
<g>
<title>sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect (5 samples, 0.04%)</title><rect x="12.0" y="499.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>sun.net.www.protocol.https.HttpsClient.afterConnect (5 samples, 0.04%)</title><rect x="12.0" y="483.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLSocketImpl.startHandshake (5 samples, 0.04%)</title><rect x="12.0" y="467.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLSocketImpl.readHandshakeRecord (4 samples, 0.03%)</title><rect x="12.0" y="451.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="15.0" y="462.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLSocketImpl.decode (4 samples, 0.03%)</title><rect x="12.0" y="435.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="15.0" y="446.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLTransport.decode (4 samples, 0.03%)</title><rect x="12.0" y="419.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="15.0" y="430.0"></text>
</g>
<g>
<title>sun.security.ssl.TransportContext.dispatch (4 samples, 0.03%)</title><rect x="12.0" y="403.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="15.0" y="414.0"></text>
</g>
<g>
<title>sun.security.ssl.HandshakeContext.dispatch (4 samples, 0.03%)</title><rect x="12.0" y="387.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="15.0" y="398.0"></text>
</g>
<g>
<title>sun.security.ssl.HandshakeContext.dispatch (4 samples, 0.03%)</title><rect x="12.0" y="371.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="15.0" y="382.0"></text>
</g>
<g>
<title>sun.security.ssl.SSLHandshake.consume (4 samples, 0.03%)</title><rect x="12.0" y="355.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.0" y="366.0"></text>
</g>
<g>
<title>sun.security.ssl.CertificateMessage$T12CertificateConsumer.consume (3 samples, 0.03%)</title><rect x="12.0" y="339.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="15.0" y="350.0"></text>
</g>
<g>
<title>sun.security.ssl.CertificateMessage$T12CertificateConsumer.onCertificate (3 samples, 0.03%)</title><rect x="12.0" y="323.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="15.0" y="334.0"></text>
</g>
<g>
<title>sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts (3 samples, 0.03%)</title><rect x="12.0" y="307.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="15.0" y="318.0"></text>
</g>
<g>
<title>sun.security.ssl.X509TrustManagerImpl.checkServerTrusted (3 samples, 0.03%)</title><rect x="12.0" y="291.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="15.0" y="302.0"></text>
</g>
<g>
<title>sun.security.ssl.X509TrustManagerImpl.checkTrusted (3 samples, 0.03%)</title><rect x="12.0" y="275.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.0" y="286.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.storage.FairPieceStorageFactory.createStorage (2,616 samples, 22.80%)</title><rect x="12.6" y="691.0" width="269.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.6" y="702.0">com.turn.ttorrent.client.storage.Fai..</text>
</g>
<g>
<title>com.turn.ttorrent.client.storage.FileCollectionStorage.read (26 samples, 0.23%)</title><rect x="12.6" y="675.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="15.6" y="686.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.storage.FileCollectionStorage.select (26 samples, 0.23%)</title><rect x="12.6" y="659.0" width="2.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="15.6" y="670.0"></text>
</g>
<g>
<title>java.util.LinkedList (26 samples, 0.23%)</title><rect x="12.6" y="643.0" width="2.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="15.6" y="654.0"></text>
</g>
<g>
<title>java.nio.ByteBuffer.allocate (2,589 samples, 22.56%)</title><rect x="15.3" y="675.0" width="266.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="18.3" y="686.0">java.nio.ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer.&lt;init&gt; (2,589 samples, 22.56%)</title><rect x="15.3" y="659.0" width="266.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="18.3" y="670.0">java.nio.HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (out) (2,589 samples, 22.56%)</title><rect x="15.3" y="643.0" width="266.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="18.3" y="654.0">byte[] (out)</text>
</g>
<g>
<title>java.lang.Thread.run (8,832 samples, 76.96%)</title><rect x="281.8" y="755.0" width="908.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="284.8" y="766.0">java.lang.Thread.run</text>
</g>
<g>
<title>com.turn.ttorrent.client.announce.Announce.run (3 samples, 0.03%)</title><rect x="281.8" y="739.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="284.8" y="750.0"></text>
</g>
<g>
<title>java.util.concurrent.ThreadPoolExecutor$Worker.run (8,828 samples, 76.93%)</title><rect x="282.1" y="739.0" width="907.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="285.1" y="750.0">java.util.concurrent.ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java.util.concurrent.ThreadPoolExecutor.runWorker (8,828 samples, 76.93%)</title><rect x="282.1" y="723.0" width="907.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="285.1" y="734.0">java.util.concurrent.ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java.util.concurrent.FutureTask.run (8,791 samples, 76.60%)</title><rect x="282.1" y="707.0" width="903.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="285.1" y="718.0">java.util.concurrent.FutureTask.run</text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter.call (8,790 samples, 76.59%)</title><rect x="282.2" y="691.0" width="903.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="285.2" y="702.0">java.util.concurrent.Executors$RunnableAdapter.call</text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager$1.run (60 samples, 0.52%)</title><rect x="282.2" y="675.0" width="6.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="285.2" y="686.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.access$000 (60 samples, 0.52%)</title><rect x="282.2" y="659.0" width="6.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="285.2" y="670.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.validatePieceAsync (60 samples, 0.52%)</title><rect x="282.2" y="643.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="285.2" y="654.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.CommunicationManager.getConnectedPeers (8 samples, 0.07%)</title><rect x="282.2" y="627.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="285.2" y="638.0"></text>
</g>
<g>
<title>java.util.HashSet.add (5 samples, 0.04%)</title><rect x="282.5" y="611.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="285.5" y="622.0"></text>
</g>
<g>
<title>java.util.HashMap.put (5 samples, 0.04%)</title><rect x="282.5" y="595.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="285.5" y="606.0"></text>
</g>
<g>
<title>java.util.HashMap.putVal (5 samples, 0.04%)</title><rect x="282.5" y="579.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="285.5" y="590.0"></text>
</g>
<g>
<title>java.util.HashMap.newNode (5 samples, 0.04%)</title><rect x="282.5" y="563.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="285.5" y="574.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (5 samples, 0.04%)</title><rect x="282.5" y="547.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="285.5" y="558.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.Piece.validate (8 samples, 0.07%)</title><rect x="283.2" y="627.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="286.2" y="638.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.TorrentUtils.calculateSha1Hash (8 samples, 0.07%)</title><rect x="283.2" y="611.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="286.2" y="622.0"></text>
</g>
<g>
<title>org.apache.commons.codec.digest.DigestUtils.sha (8 samples, 0.07%)</title><rect x="283.2" y="595.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="286.2" y="606.0"></text>
</g>
<g>
<title>org.apache.commons.codec.digest.DigestUtils.sha1 (8 samples, 0.07%)</title><rect x="283.2" y="579.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="286.2" y="590.0"></text>
</g>
<g>
<title>org.apache.commons.codec.digest.DigestUtils.getSha1Digest (8 samples, 0.07%)</title><rect x="283.2" y="563.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="286.2" y="574.0"></text>
</g>
<g>
<title>org.apache.commons.codec.digest.DigestUtils.getDigest (8 samples, 0.07%)</title><rect x="283.2" y="547.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="286.2" y="558.0"></text>
</g>
<g>
<title>java.security.MessageDigest.getInstance (8 samples, 0.07%)</title><rect x="283.2" y="531.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="286.2" y="542.0"></text>
</g>
<g>
<title>java.security.Security.getImpl (8 samples, 0.07%)</title><rect x="283.2" y="515.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="286.2" y="526.0"></text>
</g>
<g>
<title>sun.security.jca.GetInstance.getInstance (8 samples, 0.07%)</title><rect x="283.2" y="499.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="286.2" y="510.0"></text>
</g>
<g>
<title>sun.security.jca.GetInstance.getInstance (8 samples, 0.07%)</title><rect x="283.2" y="483.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="286.2" y="494.0"></text>
</g>
<g>
<title>java.security.Provider$Service.newInstance (8 samples, 0.07%)</title><rect x="283.2" y="467.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="286.2" y="478.0"></text>
</g>
<g>
<title>java.security.Provider.newInstanceUtil (8 samples, 0.07%)</title><rect x="283.2" y="451.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="286.2" y="462.0"></text>
</g>
<g>
<title>java.lang.Class[] (7 samples, 0.06%)</title><rect x="283.3" y="435.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="286.3" y="446.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.SharedTorrent.handlePeerReady (8 samples, 0.07%)</title><rect x="284.0" y="627.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="287.0" y="638.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.SharedTorrent.getRequestsCollection (3 samples, 0.03%)</title><rect x="284.0" y="611.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="287.0" y="622.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.strategy.RequestsCollectionImpl.sendAllRequests (5 samples, 0.04%)</title><rect x="284.3" y="611.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="287.3" y="622.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.downloadPiece (5 samples, 0.04%)</title><rect x="284.3" y="595.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="287.3" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$RequestMessage.craft (5 samples, 0.04%)</title><rect x="284.3" y="579.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="287.3" y="590.0"></text>
</g>
<g>
<title>java.nio.ByteBuffer.allocate (3 samples, 0.03%)</title><rect x="284.5" y="563.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="287.5" y="574.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.getAvailablePieces (32 samples, 0.28%)</title><rect x="285.1" y="627.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="288.1" y="638.0"></text>
</g>
<g>
<title>java.util.BitSet.clone (32 samples, 0.28%)</title><rect x="285.1" y="611.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="288.1" y="622.0"></text>
</g>
<g>
<title>long[] (21 samples, 0.18%)</title><rect x="285.2" y="595.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="288.2" y="606.0"></text>
</g>
<g>
<title>long[] (out) (10 samples, 0.09%)</title><rect x="287.3" y="595.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="290.3" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.network.HandshakeReceiver$1.run (4 samples, 0.03%)</title><rect x="288.3" y="675.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="291.3" y="686.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.onConnectionEstablished (4 samples, 0.03%)</title><rect x="288.3" y="659.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="291.3" y="670.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.firePeerConnected (3 samples, 0.03%)</title><rect x="288.3" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="291.3" y="654.0"></text>
</g>
<g>
<title>java.util.Arrays$ArrayList.iterator (3 samples, 0.03%)</title><rect x="288.3" y="627.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="291.3" y="638.0"></text>
</g>
<g>
<title>java.util.Arrays$ArrayItr (3 samples, 0.03%)</title><rect x="288.3" y="611.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="291.3" y="622.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.network.WorkingReceiver$1.run (2,771 samples, 24.15%)</title><rect x="288.8" y="675.0" width="284.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="291.8" y="686.0">com.turn.ttorrent.client.network.Worki..</text>
</g>
<g>
<title>byte[] (59 samples, 0.51%)</title><rect x="288.8" y="659.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="291.8" y="670.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.handleMessage (2,702 samples, 23.54%)</title><rect x="294.8" y="659.0" width="277.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="297.8" y="670.0">com.turn.ttorrent.client.peer.Sharing..</text>
</g>
<g>
<title>com.turn.ttorrent.client.Piece.record (2,588 samples, 22.55%)</title><rect x="294.8" y="643.0" width="266.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="297.8" y="654.0">com.turn.ttorrent.client.Piece.record</text>
</g>
<g>
<title>java.nio.ByteBuffer.allocate (2,588 samples, 22.55%)</title><rect x="294.8" y="627.0" width="266.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="297.8" y="638.0">java.nio.ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer.&lt;init&gt; (2,588 samples, 22.55%)</title><rect x="294.8" y="611.0" width="266.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="297.8" y="622.0">java.nio.HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (out) (2,588 samples, 22.55%)</title><rect x="294.8" y="595.0" width="266.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="297.8" y="606.0">byte[] (out)</text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.firePeerReady (97 samples, 0.85%)</title><rect x="561.0" y="643.0" width="10.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="564.0" y="654.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.SharedTorrent.handlePeerReady (97 samples, 0.85%)</title><rect x="561.0" y="627.0" width="10.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="564.0" y="638.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.SharedTorrent.getRequestsCollection (36 samples, 0.31%)</title><rect x="561.0" y="611.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="564.0" y="622.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.strategy.EndGameStrategyImpl.collectRequests (5 samples, 0.04%)</title><rect x="561.2" y="595.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="564.2" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.strategy.EndGameStrategyImpl.selectGoodPeers (5 samples, 0.04%)</title><rect x="561.2" y="579.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="564.2" y="590.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.getAvailablePieces (3 samples, 0.03%)</title><rect x="561.2" y="563.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="564.2" y="574.0"></text>
</g>
<g>
<title>java.util.BitSet.clone (3 samples, 0.03%)</title><rect x="561.2" y="547.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="564.2" y="558.0"></text>
</g>
<g>
<title>long[] (3 samples, 0.03%)</title><rect x="561.2" y="531.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="564.2" y="542.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.strategy.RequestStrategyImplAnyInteresting.choosePiece (26 samples, 0.23%)</title><rect x="561.7" y="595.0" width="2.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="564.7" y="606.0"></text>
</g>
<g>
<title>java.util.ArrayList.add (26 samples, 0.23%)</title><rect x="561.7" y="579.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="564.7" y="590.0"></text>
</g>
<g>
<title>java.util.ArrayList.add (26 samples, 0.23%)</title><rect x="561.7" y="563.0" width="2.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="564.7" y="574.0"></text>
</g>
<g>
<title>java.util.ArrayList.grow (26 samples, 0.23%)</title><rect x="561.7" y="547.0" width="2.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="564.7" y="558.0"></text>
</g>
<g>
<title>java.util.ArrayList.grow (26 samples, 0.23%)</title><rect x="561.7" y="531.0" width="2.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="564.7" y="542.0"></text>
</g>
<g>
<title>java.util.Arrays.copyOf (26 samples, 0.23%)</title><rect x="561.7" y="515.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="564.7" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (23 samples, 0.20%)</title><rect x="561.7" y="499.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="564.7" y="510.0"></text>
</g>
<g>
<title>java.util.Collections.singletonList (3 samples, 0.03%)</title><rect x="564.4" y="595.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="567.4" y="606.0"></text>
</g>
<g>
<title>java.util.Collections$SingletonList (3 samples, 0.03%)</title><rect x="564.4" y="579.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="567.4" y="590.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.strategy.RequestsCollectionImpl.sendAllRequests (61 samples, 0.53%)</title><rect x="564.7" y="611.0" width="6.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="567.7" y="622.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.downloadPiece (61 samples, 0.53%)</title><rect x="564.7" y="595.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="567.7" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.peer.SharingPeer.send (22 samples, 0.19%)</title><rect x="564.7" y="579.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="567.7" y="590.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage.getData (11 samples, 0.10%)</title><rect x="564.9" y="563.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="567.9" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer.duplicate (11 samples, 0.10%)</title><rect x="564.9" y="547.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="567.9" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.10%)</title><rect x="564.9" y="531.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="567.9" y="542.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionManager.offerWrite (5 samples, 0.04%)</title><rect x="566.1" y="563.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="569.1" y="574.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionWorker.offerWrite (5 samples, 0.04%)</title><rect x="566.1" y="547.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="569.1" y="558.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionWorker.addTaskToQueue (5 samples, 0.04%)</title><rect x="566.1" y="531.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="569.1" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue.offer (5 samples, 0.04%)</title><rect x="566.1" y="515.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="569.1" y="526.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.WriteTask (4 samples, 0.03%)</title><rect x="566.6" y="563.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="569.6" y="574.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$RequestMessage.craft (36 samples, 0.31%)</title><rect x="567.0" y="579.0" width="3.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="570.0" y="590.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$RequestMessage (14 samples, 0.12%)</title><rect x="567.0" y="563.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="570.0" y="574.0"></text>
</g>
<g>
<title>java.nio.ByteBuffer.allocate (22 samples, 0.19%)</title><rect x="568.4" y="563.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="571.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16 samples, 0.14%)</title><rect x="568.4" y="547.0" width="1.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="571.4" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="570.1" y="547.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="573.1" y="558.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.05%)</title><rect x="570.1" y="531.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="573.1" y="542.0"></text>
</g>
<g>
<title>java.util.ArrayList.add (3 samples, 0.03%)</title><rect x="570.7" y="579.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="573.7" y="590.0"></text>
</g>
<g>
<title>java.util.ArrayList.add (3 samples, 0.03%)</title><rect x="570.7" y="563.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="573.7" y="574.0"></text>
</g>
<g>
<title>java.util.ArrayList.grow (3 samples, 0.03%)</title><rect x="570.7" y="547.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="573.7" y="558.0"></text>
</g>
<g>
<title>java.util.ArrayList.grow (3 samples, 0.03%)</title><rect x="570.7" y="531.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="573.7" y="542.0"></text>
</g>
<g>
<title>java.util.Arrays.copyOf (3 samples, 0.03%)</title><rect x="570.7" y="515.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="573.7" y="526.0"></text>
</g>
<g>
<title>java.lang.Integer.valueOf (3 samples, 0.03%)</title><rect x="571.1" y="643.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="574.1" y="654.0"></text>
</g>
<g>
<title>java.lang.Integer (3 samples, 0.03%)</title><rect x="571.1" y="627.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="574.1" y="638.0"></text>
</g>
<g>
<title>java.lang.Long.valueOf (7 samples, 0.06%)</title><rect x="571.4" y="643.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="574.4" y="654.0"></text>
</g>
<g>
<title>java.lang.Long (7 samples, 0.06%)</title><rect x="571.4" y="627.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="574.4" y="638.0"></text>
</g>
<g>
<title>java.lang.StringBuilder.append (5 samples, 0.04%)</title><rect x="572.1" y="643.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="575.1" y="654.0"></text>
</g>
<g>
<title>java.lang.String.valueOf (3 samples, 0.03%)</title><rect x="572.2" y="627.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="575.2" y="638.0"></text>
</g>
<g>
<title>com.turn.ttorrent.client.Piece.toString (3 samples, 0.03%)</title><rect x="572.2" y="611.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="575.2" y="622.0"></text>
</g>
<g>
<title>java.lang.String.format (3 samples, 0.03%)</title><rect x="572.2" y="595.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="575.2" y="606.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (3 samples, 0.03%)</title><rect x="572.9" y="659.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="575.9" y="670.0"></text>
</g>
<g>
<title>java.lang.StringBuilder.append (5 samples, 0.04%)</title><rect x="573.2" y="659.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="576.2" y="670.0"></text>
</g>
<g>
<title>java.lang.AbstractStringBuilder.append (5 samples, 0.04%)</title><rect x="573.2" y="643.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="576.2" y="654.0"></text>
</g>
<g>
<title>java.lang.AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.04%)</title><rect x="573.2" y="627.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="576.2" y="638.0"></text>
</g>
<g>
<title>java.util.Arrays.copyOf (5 samples, 0.04%)</title><rect x="573.2" y="611.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="576.2" y="622.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.04%)</title><rect x="573.2" y="595.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="576.2" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionWorker.run (5,955 samples, 51.89%)</title><rect x="573.7" y="675.0" width="612.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="576.7" y="686.0">com.turn.ttorrent.network.ConnectionWorker.run</text>
</g>
<g>
<title>byte[] (31 samples, 0.27%)</title><rect x="573.7" y="659.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="576.7" y="670.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionWorker.processSelectedKeys (5,449 samples, 47.48%)</title><rect x="576.9" y="659.0" width="560.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="579.9" y="670.0">com.turn.ttorrent.network.ConnectionWorker.processSelectedKeys</text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionWorker.processSelectedKey (5,434 samples, 47.35%)</title><rect x="576.9" y="643.0" width="558.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="579.9" y="654.0">com.turn.ttorrent.network.ConnectionWorker.processSelectedKey</text>
</g>
<g>
<title>com.turn.ttorrent.network.keyProcessors.ReadableKeyProcessor.process (5,432 samples, 47.33%)</title><rect x="576.9" y="627.0" width="558.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="579.9" y="638.0">com.turn.ttorrent.network.keyProcessors.ReadableKeyProcessor.process</text>
</g>
<g>
<title>com.turn.ttorrent.client.network.OutgoingConnectionListener.onNewDataAvailable (5,432 samples, 47.33%)</title><rect x="576.9" y="611.0" width="558.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="579.9" y="622.0">com.turn.ttorrent.client.network.OutgoingConnectionListener.onNewDataAvailable</text>
</g>
<g>
<title>com.turn.ttorrent.client.network.WorkingReceiver.processAndGetNext (5,432 samples, 47.33%)</title><rect x="576.9" y="595.0" width="558.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="579.9" y="606.0">com.turn.ttorrent.client.network.WorkingReceiver.processAndGetNext</text>
</g>
<g>
<title>com.turn.ttorrent.client.network.WorkingReceiver$1 (3 samples, 0.03%)</title><rect x="577.0" y="579.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="580.0" y="590.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage.parse (21 samples, 0.18%)</title><rect x="577.3" y="579.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="580.3" y="590.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$PieceMessage.parse (10 samples, 0.09%)</title><rect x="577.3" y="563.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="580.3" y="574.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$PieceMessage (3 samples, 0.03%)</title><rect x="577.3" y="547.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="580.3" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer.slice (7 samples, 0.06%)</title><rect x="577.6" y="547.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="580.6" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.06%)</title><rect x="577.6" y="531.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="580.6" y="542.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$Type.get (4 samples, 0.03%)</title><rect x="578.3" y="563.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="581.3" y="574.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$Type.values (4 samples, 0.03%)</title><rect x="578.3" y="547.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="581.3" y="558.0"></text>
</g>
<g>
<title>com.turn.ttorrent.common.protocol.PeerMessage$Type[] (4 samples, 0.03%)</title><rect x="578.3" y="531.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="581.3" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer.slice (7 samples, 0.06%)</title><rect x="578.7" y="563.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="581.7" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.06%)</title><rect x="578.7" y="547.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="581.7" y="558.0"></text>
</g>
<g>
<title>java.lang.Integer.valueOf (57 samples, 0.50%)</title><rect x="579.5" y="579.0" width="5.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="582.5" y="590.0"></text>
</g>
<g>
<title>java.lang.Integer (57 samples, 0.50%)</title><rect x="579.5" y="563.0" width="5.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="582.5" y="574.0"></text>
</g>
<g>
<title>java.nio.ByteBuffer.allocate (2,377 samples, 20.71%)</title><rect x="585.4" y="579.0" width="244.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="588.4" y="590.0">java.nio.ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16 samples, 0.14%)</title><rect x="585.4" y="563.0" width="1.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="588.4" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer.&lt;init&gt; (2,361 samples, 20.57%)</title><rect x="587.0" y="563.0" width="242.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="590.0" y="574.0">java.nio.HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (2,043 samples, 17.80%)</title><rect x="587.0" y="547.0" width="210.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="590.0" y="558.0">byte[]</text>
</g>
<g>
<title>byte[] (out) (318 samples, 2.77%)</title><rect x="797.1" y="547.0" width="32.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="800.1" y="558.0">by..</text>
</g>
<g>
<title>java.nio.ByteBuffer.wrap (634 samples, 5.52%)</title><rect x="829.8" y="579.0" width="65.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="832.8" y="590.0">java.ni..</text>
</g>
<g>
<title>java.nio.ByteBuffer.wrap (634 samples, 5.52%)</title><rect x="829.8" y="563.0" width="65.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="832.8" y="574.0">java.ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (634 samples, 5.52%)</title><rect x="829.8" y="547.0" width="65.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="832.8" y="558.0">java.ni..</text>
</g>
<g>
<title>java.util.Arrays.copyOf (2,332 samples, 20.32%)</title><rect x="895.0" y="579.0" width="239.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="898.0" y="590.0">java.util.Arrays.copyOf</text>
</g>
<g>
<title>byte[] (1,984 samples, 17.29%)</title><rect x="895.0" y="563.0" width="204.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="898.0" y="574.0">byte[]</text>
</g>
<g>
<title>byte[] (out) (348 samples, 3.03%)</title><rect x="1099.0" y="563.0" width="35.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1102.0" y="574.0">byt..</text>
</g>
<g>
<title>java.util.concurrent.AbstractExecutorService.submit (5 samples, 0.04%)</title><rect x="1134.8" y="579.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1137.8" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.AbstractExecutorService.newTaskFor (4 samples, 0.03%)</title><rect x="1134.8" y="563.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1137.8" y="574.0"></text>
</g>
<g>
<title>sun.nio.ch.Util$2.iterator (15 samples, 0.13%)</title><rect x="1135.6" y="643.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>java.util.HashSet.iterator (15 samples, 0.13%)</title><rect x="1135.6" y="627.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet.iterator (15 samples, 0.13%)</title><rect x="1135.6" y="611.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1138.6" y="622.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (15 samples, 0.13%)</title><rect x="1135.6" y="595.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1138.6" y="606.0"></text>
</g>
<g>
<title>com.turn.ttorrent.network.ConnectionWorker.processWriteTasks (47 samples, 0.41%)</title><rect x="1137.1" y="659.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1140.1" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue.iterator (34 samples, 0.30%)</title><rect x="1137.3" y="643.0" width="3.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1140.3" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Itr (33 samples, 0.29%)</title><rect x="1137.4" y="627.0" width="3.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1140.4" y="638.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue.offer (12 samples, 0.10%)</title><rect x="1140.7" y="643.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1143.7" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (12 samples, 0.10%)</title><rect x="1140.7" y="627.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1143.7" y="638.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.10%)</title><rect x="1142.0" y="659.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1145.0" y="670.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (6 samples, 0.05%)</title><rect x="1143.2" y="659.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1146.2" y="670.0"></text>
</g>
<g>
<title>java.lang.StringBuilder.&lt;init&gt; (8 samples, 0.07%)</title><rect x="1143.8" y="659.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1146.8" y="670.0"></text>
</g>
<g>
<title>java.lang.AbstractStringBuilder.&lt;init&gt; (8 samples, 0.07%)</title><rect x="1143.8" y="643.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1146.8" y="654.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.07%)</title><rect x="1143.8" y="627.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1146.8" y="638.0"></text>
</g>
<g>
<title>java.lang.StringBuilder.append (29 samples, 0.25%)</title><rect x="1144.7" y="659.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1147.7" y="670.0"></text>
</g>
<g>
<title>java.lang.AbstractStringBuilder.append (29 samples, 0.25%)</title><rect x="1144.7" y="643.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1147.7" y="654.0"></text>
</g>
<g>
<title>java.lang.AbstractStringBuilder.ensureCapacityInternal (29 samples, 0.25%)</title><rect x="1144.7" y="627.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1147.7" y="638.0"></text>
</g>
<g>
<title>java.util.Arrays.copyOf (29 samples, 0.25%)</title><rect x="1144.7" y="611.0" width="2.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1147.7" y="622.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.25%)</title><rect x="1144.7" y="595.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1147.7" y="606.0"></text>
</g>
<g>
<title>java.lang.StringBuilder.toString (16 samples, 0.14%)</title><rect x="1147.6" y="659.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1150.6" y="670.0"></text>
</g>
<g>
<title>java.lang.StringLatin1.newString (16 samples, 0.14%)</title><rect x="1147.6" y="643.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1150.6" y="654.0"></text>
</g>
<g>
<title>java.lang.String (6 samples, 0.05%)</title><rect x="1147.6" y="627.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1150.6" y="638.0"></text>
</g>
<g>
<title>java.util.Arrays.copyOfRange (10 samples, 0.09%)</title><rect x="1148.3" y="627.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.09%)</title><rect x="1148.3" y="611.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1151.3" y="622.0"></text>
</g>
<g>
<title>sun.nio.ch.SelectorImpl.select (357 samples, 3.11%)</title><rect x="1149.3" y="659.0" width="36.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1152.3" y="670.0">sun..</text>
</g>
<g>
<title>sun.nio.ch.SelectorImpl.lockAndDoSelect (357 samples, 3.11%)</title><rect x="1149.3" y="643.0" width="36.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1152.3" y="654.0">sun..</text>
</g>
<g>
<title>sun.nio.ch.EPollSelectorImpl.doSelect (357 samples, 3.11%)</title><rect x="1149.3" y="627.0" width="36.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1152.3" y="638.0">sun..</text>
</g>
<g>
<title>sun.nio.ch.EPollSelectorImpl.processEvents (357 samples, 3.11%)</title><rect x="1149.3" y="611.0" width="36.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1152.3" y="622.0">sun..</text>
</g>
<g>
<title>sun.nio.ch.SelectorImpl.processReadyEvents (356 samples, 3.10%)</title><rect x="1149.4" y="595.0" width="36.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1152.4" y="606.0">sun..</text>
</g>
<g>
<title>java.util.HashSet.add (356 samples, 3.10%)</title><rect x="1149.4" y="579.0" width="36.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1152.4" y="590.0">jav..</text>
</g>
<g>
<title>java.util.HashMap.put (356 samples, 3.10%)</title><rect x="1149.4" y="563.0" width="36.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1152.4" y="574.0">jav..</text>
</g>
<g>
<title>java.util.HashMap.putVal (356 samples, 3.10%)</title><rect x="1149.4" y="547.0" width="36.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1152.4" y="558.0">jav..</text>
</g>
<g>
<title>java.util.HashMap.newNode (356 samples, 3.10%)</title><rect x="1149.4" y="531.0" width="36.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1152.4" y="542.0">jav..</text>
</g>
<g>
<title>java.util.HashMap$Node (356 samples, 3.10%)</title><rect x="1149.4" y="515.0" width="36.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1152.4" y="526.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.ThreadPoolExecutor.getTask (37 samples, 0.32%)</title><rect x="1186.0" y="707.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue.take (37 samples, 0.32%)</title><rect x="1186.0" y="691.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await (35 samples, 0.30%)</title><rect x="1186.0" y="675.0" width="3.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (35 samples, 0.30%)</title><rect x="1186.0" y="659.0" width="3.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (35 samples, 0.30%)</title><rect x="1186.0" y="643.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
</g>
</svg>
